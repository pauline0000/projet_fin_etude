import requests
import json
from datetime import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Obtenir la date actuelle et la convertir en format requis pour l'API NVD
now = datetime.now()
year = str(now.year)
month = str(now.month).zfill(2)
day = str(now.day).zfill(2)
start_date = f"{year}-{month}-01T00:00:00:000 UTC-00:00"
end_date = f"{year}-{month}-{day}T23:59:59:999 UTC-00:00"

# URL de l'API NVD pour récupérer les vulnérabilités récentes
url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?resultsPerPage=20&pubStartDate={start_date}&pubEndDate={end_date}"

# Faire la demande HTTP GET
response = requests.get(url)

# Convertir la réponse JSON en objet Python
data = json.loads(response.text)

# Créer un string pour stocker les informations sur les vulnérabilités
vulnerabilities_info = ""

# Afficher les informations sur chaque vulnérabilité
for result in data['result']['CVE_Items']:
    # Récupérer les informations sur l'impact
    impact = result['impact']

    # Vérifier si la clé 'baseMetricV3' existe dans la réponse
    if 'baseMetricV3' in impact:
        severity = impact['baseMetricV3']['cvssV3']['baseSeverity']

        # Vérifier si l'impact est critique ou élevé
        if severity in ['CRITICAL', 'HIGH']:
            # Récupérer les informations sur la vulnérabilité
            cve_id = result['cve']['CVE_data_meta']['ID']
            description = result['cve']['description']['description_data'][0]['value']

            # Stocker les informations sur la vulnérabilité dans le string
            vulnerabilities_info += f"ID: {cve_id}\n"
            vulnerabilities_info += f"Description: {description}\n"
            vulnerabilities_info += f"Impact: {severity}\n"
            vulnerabilities_info += "-" * 50 + "\n"

            # Afficher les informations sur la vulnérabilité
            print(f"ID: {cve_id}")
            print(f"Description: {description}")
            print(f"Impact: {severity}")
            print("-" * 50)
    else:
        # Afficher un message d'erreur si la clé 'baseMetricV3' n'existe pas
        print(f"La vulnérabilité {result['cve']['CVE_data_meta']['ID']} n'a pas d'impact assigné.")

# Demander l'email de l'utilisateur
email = input("Entrez votre adresse e-mail : ")

# Envoyer les résultats par email
gmail_user = "pauline.stephan5@gmail.com"
gmail_password = "nuxstodowonobbcv"

msg = MIMEMultipart()
msg['From'] = gmail_user
msg['To'] = email
msg['Subject'] = "Rapport des vulnérabilités récentes"

body = vulnerabilities_info
msg.attach(MIMEText(body, 'plain'))

try:
    server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
    server.ehlo()
    server.login(gmail_user, gmail_password)
    text = msg.as_string()
    server.sendmail(gmail_user, email, text)
    server.quit()
    print(f"Les informations sur les vulnérabilités ont été envoyées avec succès à {email}.")
except Exception as e:
    print(f"Une erreur s'est produite lors de l'envoi de l'email : {str(e)}")
   
